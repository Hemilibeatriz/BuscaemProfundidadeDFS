# -*- coding: utf-8 -*-
"""DFS29.10.2020-Propriedades.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xC1OF04ZxIR7gfGbRBtcabmibvBap8uT
"""

import numpy as np
class Graph:

    def __init__(self,vertices):
        self.V=vertices #numero de vertices
        self.graph=[]#vetor vazio definido para armazenar as arestas entre vertices
        
        self.tempo=0
        self.descoberta=[]
        self.fim=[]

        self.predecessor=[]

        self.visited=[]
        self.topologica=[]

    def addEdge(self, u, v):
        self.graph.append([u,v])

    def DFSUtil(self, v):

       self.tempo=self.tempo+1
       self.descoberta[v]=self.tempo

       self.visited[v]='Gray'
       print(v, end = ' ')

       for i in self.graph:
          if v==i[0]:
             if self.visited[i[1]] == 'white':
                self.predecessor[i[1]]=v
                self.DFSUtil(i[1])
       
       self.visited[v]='Black'
       self.topologica.append(v)
       self.tempo=self.tempo+1
       self.fim[v]=self.tempo

    def DFS(self, v):
       self.visited = ['white'] * (self.V)
       self.predecessor=[-1] * (self.V)

       self.descoberta=[-1] * (self.V)
       self.fim=[-1] * (self.V)


       #ordena comforme primeiro vertice das arestas
       self.graph.sort()

              
       self.tempo=0

       self.DFSUtil(v)


       print('\n')
       print('Predecessores: ', self.predecessor)
       print('Descoberta: ', self.descoberta)
       print('Fim da visita: ', self.fim)
       print('Vetor visitados: ', self.visited)

    def Ordenacao(self):

       vertices = self.graph
       
       vertices = np.unique(np.array(vertices).flatten())



       for v in vertices:
          print('\n')
          print("Vertice: ", v)
          self.visited = ['white'] * (self.V)
          self.predecessor=[-1] * (self.V)

          self.descoberta=[-1] * (self.V)
          self.fim=[-1] * (self.V)
          self.topologica=[]


          #ordena comforme primeiro vertice das arestas
          self.graph.sort()

              
          self.tempo=0

          self.DFSUtil(v)


          print('\n')
          print('Predecessores: ', self.predecessor)
          print('Descoberta: ', self.descoberta)
          print('Fim da visita: ', self.fim)
          print('Vetor visitados: ', self.visited)
          print('Topologica: ', self.topologica)

g=Graph(8)
g.addEdge(1,7)
g.addEdge(6,7)
g.addEdge(1,5)# 1 Ã© apontado pelo 5
g.addEdge(6,3)
g.addEdge(0,3)
g.addEdge(2,1)
g.addEdge(4,1)
g.addEdge(0,1)
g.addEdge(4,6)

print("Busca Ordenacao Topologica")
g.Ordenacao()